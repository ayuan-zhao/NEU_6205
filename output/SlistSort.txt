SlistSortTest STARTS
********* merge_sort START ********** 
Before sort s = 
After  sort s = 
# n =      0
# num recursion  =     0
# num compare(C)     =  0
# num swap(S)     =  0
# C+S     =  0
Zero elements in array
********* merge_sort ENDS********** 
********* merge_sort START ********** 
Before sort s = 15->NIL
After  sort s = 15->NIL
# n =      1
# num recursion  =     0
# num compare(C)     =  0
# num swap(S)     =  0
# C+S     =  0
# nlogn    =  0.0
********* merge_sort ENDS********** 
********* merge_sort START ********** 
Before sort s = 15->5->NIL
After  sort s = 5->15->NIL
# n =      2
# num recursion  =     1
# num compare(C)     =  1
# num swap(S)     =  0
# C+S     =  1
# nlogn    =  2.0
T(n)=(C+S)/(nlogn)= 0.5(n*logn)
********* merge_sort ENDS********** 
********* merge_sort START ********** 
Before sort s = 15->5->64->8->12->11->4->35->NIL
After  sort s = 4->5->8->11->12->15->35->64->NIL
# n =      8
# num recursion  =     7
# num compare(C)     =  17
# num swap(S)     =  0
# C+S     =  17
# nlogn    =  24.0
T(n)=(C+S)/(nlogn)= 0.7083333333333334(n*logn)
********* merge_sort ENDS********** 
********* merge_sort START ********** 
Before sort s = 6->5->4->3->2->1->NIL
After  sort s = 1->2->3->4->5->6->NIL
# n =      6
# num recursion  =     5
# num compare(C)     =  7
# num swap(S)     =  0
# C+S     =  7
# nlogn    =  15.509775004326936
T(n)=(C+S)/(nlogn)= 0.4513282751069652(n*logn)
********* merge_sort ENDS********** 
********* merge_sort START ********** 
Before sort s = 1->2->3->4->5->6->NIL
After  sort s = 1->2->3->4->5->6->NIL
# n =      6
# num recursion  =     5
# num compare(C)     =  9
# num swap(S)     =  0
# C+S     =  9
# nlogn    =  15.509775004326936
T(n)=(C+S)/(nlogn)= 0.5802792108518124(n*logn)
********* merge_sort ENDS********** 
********* merge_sort START ********** 
Before sort s = 1->1->1->1->1->1->NIL
After  sort s = 1->1->1->1->1->1->NIL
# n =      6
# num recursion  =     5
# num compare(C)     =  9
# num swap(S)     =  0
# C+S     =  9
# nlogn    =  15.509775004326936
T(n)=(C+S)/(nlogn)= 0.5802792108518124(n*logn)
********* merge_sort ENDS********** 
********* merge_sort START ********** 
Before sort s = 3->1->4->1->5->9->2->6->5->3->5->8->9->7->9->3->NIL
After  sort s = 1->1->2->3->3->3->4->5->5->5->6->7->8->9->9->9->NIL
# n =      16
# num recursion  =     15
# num compare(C)     =  44
# num swap(S)     =  0
# C+S     =  44
# nlogn    =  64.0
T(n)=(C+S)/(nlogn)= 0.6875(n*logn)
********* merge_sort ENDS********** 
********* quick_sort START ********** 
Before sort s = 
# n =      0
# num recursion  =     0
# num compare(C)     =  0
# num swap(S)     =  0
# C+S     =  0
Zero elements in array
********* quick_sort ENDS********** 
********* quick_sort START ********** 
Before sort s = 15->NIL
After  sort s = 15->NIL
# n =      1
# num recursion  =     0
# num compare(C)     =  0
# num swap(S)     =  0
# C+S     =  0
# nlogn    =  0.0
********* quick_sort ENDS********** 
********* quick_sort START ********** 
Before sort s = 15->5->NIL
After  sort s = 5->15->NIL
# n =      2
# num recursion  =     1
# num compare(C)     =  1
# num swap(S)     =  0
# C+S     =  1
# nlogn    =  2.0
T(n)=(C+S)/(nlogn)= 0.5(n*logn)
********* quick_sort ENDS********** 
********* quick_sort START ********** 
Before sort s = 15->5->64->8->12->11->4->35->NIL
After  sort s = 4->5->8->11->12->15->35->64->NIL
# n =      8
# num recursion  =     5
# num compare(C)     =  20
# num swap(S)     =  13
# C+S     =  33
# nlogn    =  24.0
T(n)=(C+S)/(nlogn)= 1.375(n*logn)
********* quick_sort ENDS********** 
********* quick_sort START ********** 
Before sort s = 6->5->4->3->2->1->NIL
After  sort s = 1->2->3->4->5->6->NIL
# n =      6
# num recursion  =     5
# num compare(C)     =  15
# num swap(S)     =  6
# C+S     =  21
# nlogn    =  15.509775004326936
T(n)=(C+S)/(nlogn)= 1.3539848253208957(n*logn)
********* quick_sort ENDS********** 
********* quick_sort START ********** 
Before sort s = 1->2->3->4->5->6->NIL
After  sort s = 1->2->3->4->5->6->NIL
# n =      6
# num recursion  =     5
# num compare(C)     =  15
# num swap(S)     =  15
# C+S     =  30
# nlogn    =  15.509775004326936
T(n)=(C+S)/(nlogn)= 1.934264036172708(n*logn)
********* quick_sort ENDS********** 
********* quick_sort START ********** 
Before sort s = 1->1->1->1->1->1->NIL
After  sort s = 1->1->1->1->1->1->NIL
# n =      6
# num recursion  =     5
# num compare(C)     =  15
# num swap(S)     =  15
# C+S     =  30
# nlogn    =  15.509775004326936
T(n)=(C+S)/(nlogn)= 1.934264036172708(n*logn)
********* quick_sort ENDS********** 
********* quick_sort START ********** 
Before sort s = 3->1->4->1->5->9->2->6->5->3->5->8->9->7->9->3->NIL
After  sort s = 1->1->2->3->3->3->4->5->5->5->6->7->8->9->9->9->NIL
# n =      16
# num recursion  =     11
# num compare(C)     =  55
# num swap(S)     =  40
# C+S     =  95
# nlogn    =  64.0
T(n)=(C+S)/(nlogn)= 1.484375(n*logn)
********* quick_sort ENDS********** 
 ============================================= 
Running  merge_sort on 4999 Random numbers
# n =      4999
# num recursion  =     4998
# num compare(C)     =  55239
# num swap(S)     =  0
# C+S     =  55239
# nlogn    =  61424.83163460594
T(n)=(C+S)/(nlogn)= 0.8992942842496793(n*logn)
 ============================================= 
 ============================================= 
Running  merge_sort on 10000 Random numbers
# n =      10000
# num recursion  =     9999
# num compare(C)     =  120480
# num swap(S)     =  0
# C+S     =  120480
# nlogn    =  132877.1237954945
T(n)=(C+S)/(nlogn)= 0.9067023469399114(n*logn)
 ============================================= 
 ============================================= 
Running  merge_sort on 14999 Random numbers
# n =      14999
# num recursion  =     14998
# num compare(C)     =  189304
# num swap(S)     =  0
# C+S     =  189304
# nlogn    =  208074.80788222884
T(n)=(C+S)/(nlogn)= 0.909788176313717(n*logn)
 ============================================= 
 ============================================= 
Running  merge_sort on 20000 Random numbers
# n =      20000
# num recursion  =     19999
# num compare(C)     =  260886
# num swap(S)     =  0
# C+S     =  260886
# nlogn    =  285754.247590989
T(n)=(C+S)/(nlogn)= 0.9129733055566549(n*logn)
 ============================================= 
 ============================================= 
Running  quick_sort on 4999 Random numbers
# n =      4999
# num recursion  =     4501
# num compare(C)     =  78161
# num swap(S)     =  51773
# C+S     =  129934
# nlogn    =  61424.83163460594
T(n)=(C+S)/(nlogn)= 2.115333433438292(n*logn)
 ============================================= 
 ============================================= 
Running  quick_sort on 10000 Random numbers
# n =      10000
# num recursion  =     9005
# num compare(C)     =  174188
# num swap(S)     =  113339
# C+S     =  287527
# nlogn    =  132877.1237954945
T(n)=(C+S)/(nlogn)= 2.163856289081938(n*logn)
 ============================================= 
 ============================================= 
Running  quick_sort on 14999 Random numbers
# n =      14999
# num recursion  =     13505
# num compare(C)     =  284280
# num swap(S)     =  182310
# C+S     =  466590
# nlogn    =  208074.80788222884
T(n)=(C+S)/(nlogn)= 2.242414662057945(n*logn)
 ============================================= 
 ============================================= 
Running  quick_sort on 20000 Random numbers
# n =      20000
# num recursion  =     18003
# num compare(C)     =  386279
# num swap(S)     =  240702
# C+S     =  626981
# nlogn    =  285754.247590989
T(n)=(C+S)/(nlogn)= 2.1941266150395844(n*logn)
 ============================================= 
 ============================================= 
Running  merge_sort on 4999 Already increasing order with duplicates
# n =      4999
# num recursion  =     4998
# num compare(C)     =  31997
# num swap(S)     =  0
# C+S     =  31997
# nlogn    =  61424.83163460594
T(n)=(C+S)/(nlogn)= 0.5209131087300094(n*logn)
 ============================================= 
 ============================================= 
Running  merge_sort on 10000 Already Decreasing order
# n =      10000
# num recursion  =     9999
# num compare(C)     =  64608
# num swap(S)     =  0
# C+S     =  64608
# nlogn    =  132877.1237954945
T(n)=(C+S)/(nlogn)= 0.4862236489964624(n*logn)
 ============================================= 
 ============================================= 
Running  merge_sort on 14999 Already increasing order with duplicates
# n =      14999
# num recursion  =     14998
# num compare(C)     =  106358
# num swap(S)     =  0
# C+S     =  106358
# nlogn    =  208074.80788222884
T(n)=(C+S)/(nlogn)= 0.5111527007161725(n*logn)
 ============================================= 
 ============================================= 
Running  quick_sort on 4999 Already increasing order with duplicates
# n =      4999
# num recursion  =     4998
# num compare(C)     =  12492501
# num swap(S)     =  12492501
# C+S     =  24985002
# nlogn    =  61424.83163460594
T(n)=(C+S)/(nlogn)= 406.7573542346314(n*logn)
 ============================================= 
 ============================================= 
Running  quick_sort on 10000 Already Decreasing order
# n =      10000
# num recursion  =     9999
# num compare(C)     =  49995000
# num swap(S)     =  24995000
# C+S     =  74990000
# nlogn    =  132877.1237954945
T(n)=(C+S)/(nlogn)= 564.3559843710487(n*logn)
 ============================================= 
 ============================================= 
Running  quick_sort on 14999 Already increasing order with duplicates
